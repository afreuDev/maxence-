---
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

export interface Props {
  id?: string;
  links?: Array<Link>;
  showToggleTheme?: boolean;
}

const {
  id = 'header',
  links = [],
  showToggleTheme = false,
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={['absolute top-0 z-40 w-full']}
  {...id ? { id } : {}}
>
  <div
    class="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8"
  >
    <div class="flex items-center justify-between h-16 md:h-20">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={getHomePermalink()}>
          <Logo />
        </a>
      </div>

      <!-- Desktop navigation -->
      <nav class="hidden md:flex md:items-center md:space-x-8" aria-label="Main navigation">
        {
          links.map(({ text, href }) => (
            <a
              class:list={[
                'text-base font-medium text-white/80 hover:text-white transition-colors duration-200',
                { 'aw-link-active': href === currentPath },
              ]}
              href={href}
            >
              {text}
            </a>
          ))
        }
        {showToggleTheme && (
          <div class="hidden md:block">
            <ToggleTheme />
          </div>
        )}
      </nav>

      <!-- Mobile menu button -->
      <div class="md:hidden flex items-center">
        {showToggleTheme && <ToggleTheme />}
        <ToggleMenu />
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="md:hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
      {
        links.map(({ text, href }) => (
          <a
            class:list={[
              'block px-3 py-2 rounded-md text-base font-medium text-white/80 hover:text-white hover:bg-white/10',
              { 'aw-link-active': href === currentPath },
            ]}
            href={href}
          >
            {text}
          </a>
        ))
      }
    </div>
  </div>
</header>

<script>
  // Add scroll listener to handle header background
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('header');

    // Mobile menu toggle
    const toggle = document.querySelector('[data-aw-toggle-menu]');
    if (toggle && header) {
      toggle.addEventListener('click', () => {
        toggle.classList.toggle('expanded');
        header.classList.toggle('menu-open');
      });
    }
  });
</script>

<style>
  #header {
    transition: background-color 0.3s ease-in-out, border-color 0.3s ease-in-out;
  }

  /* Active link style */
  .aw-link-active {
    @apply text-white;
  }

  #mobile-menu {
    background-color: var(--aw-color-bg-mobile-menu);
    @apply hidden backdrop-blur-lg;
  }

  #header.menu-open #mobile-menu {
    @apply block;
  }
</style>
