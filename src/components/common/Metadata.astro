---
import merge from 'lodash.merge';
import { AstroSeo } from '@astrolib/seo';

import type { Props as AstroSeoProps } from '@astrolib/seo';

import { SITE, METADATA, I18N } from 'astrowind:config';
import type { MetaData, Race, Athlete } from '~/types';
import { getCanonical } from '~/utils/permalinks';

import { adaptOpenGraphImages, findImage } from '~/utils/images';

export interface Props extends MetaData {
  dontUseTitleTemplate?: boolean;
  nextRace?: Race;
  athlete?: Athlete;
}

const {
  title,
  ignoreTitleTemplate = false,
  canonical = String(getCanonical(String(Astro.url.pathname))),
  robots = {},
  description,
  openGraph = {},
  twitter = {},
  nextRace,
  athlete,
} = Astro.props;

const jsonld: Record<string, unknown>[] = [];

if (athlete) {
  const image = await findImage(athlete.cover);
  const imageUrl = typeof image === 'string' ? image : image ? new URL(image.src, Astro.site).href : '';

  jsonld.push({
    '@context': 'https://schema.org',
    '@type': 'Person',
    name: athlete.title,
    jobTitle: 'Professional Triathlete',
    sport: 'Triathlon',
    url: Astro.site,
    image: imageUrl,
    birthDate: athlete.naissance,
    height: { '@type': 'QuantitativeValue', value: athlete.taille },
    weight: { '@type': 'QuantitativeValue', value: athlete.poids },
    nationality: 'French',
    sameAs: [athlete.socials.instagram, `mailto:${athlete.socials.email}`],
  });
}

if (nextRace) {
  jsonld.push({
    '@context': 'https://schema.org',
    '@type': 'SportsEvent',
    name: nextRace.race,
    sport: 'Triathlon',
    startDate: nextRace.date.toISOString().split('T')[0],
    location: {
      '@type': 'Place',
      name: nextRace.city,
      address: {
        '@type': 'PostalAddress',
        addressLocality: nextRace.city,
        addressCountry: nextRace.country,
      }
    },
    url: nextRace.link,
    performer: {
      '@type': 'Person',
      name: athlete?.title,
    }
  });
}

const seoProps: AstroSeoProps = merge(
  {
    title: '',
    titleTemplate: '%s',
    canonical: canonical,
    noindex: true,
    nofollow: true,
    description: undefined,
    openGraph: {
      url: canonical,
      site_name: SITE?.name,
      images: [],
      locale: I18N?.language || 'en',
      type: 'website',
    },
    twitter: {
      cardType: openGraph?.images?.length ? 'summary_large_image' : 'summary',
    },
  },
  {
    title: METADATA?.title?.default,
    titleTemplate: METADATA?.title?.template,
    noindex: typeof METADATA?.robots?.index !== 'undefined' ? !METADATA.robots.index : undefined,
    nofollow: typeof METADATA?.robots?.follow !== 'undefined' ? !METADATA.robots.follow : undefined,
    description: METADATA?.description,
    openGraph: METADATA?.openGraph,
    twitter: METADATA?.twitter,
  },
  {
    title: title,
    titleTemplate: ignoreTitleTemplate ? '%s' : undefined,
    canonical: canonical,
    noindex: typeof robots?.index !== 'undefined' ? !robots.index : undefined,
    nofollow: typeof robots?.follow !== 'undefined' ? !robots.follow : undefined,
    description: description,
    openGraph: { url: canonical, ...openGraph },
    twitter: twitter,
  }
);
---

<AstroSeo
  {...{ ...seoProps, openGraph: await adaptOpenGraphImages(seoProps?.openGraph, Astro.site), jsonld: jsonld }}
/>
